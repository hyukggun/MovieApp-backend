// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"movie-app/ent/user"
	"movie-app/ent/userpost"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserPost is the model entity for the UserPost schema.
type UserPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PostText holds the value of the "post_text" field.
	PostText string `json:"post_text,omitempty"`
	// PostImages holds the value of the "post_images" field.
	PostImages map[string]string `json:"post_images,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPostQuery when eager-loading is set.
	Edges           UserPostEdges `json:"edges"`
	user_user_posts *int
	selectValues    sql.SelectValues
}

// UserPostEdges holds the relations/edges for other nodes in the graph.
type UserPostEdges struct {
	// UserID holds the value of the user_id edge.
	UserID *User `json:"user_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserIDOrErr returns the UserID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPostEdges) UserIDOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.UserID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserID, nil
	}
	return nil, &NotLoadedError{edge: "user_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpost.FieldPostImages:
			values[i] = new([]byte)
		case userpost.FieldID:
			values[i] = new(sql.NullInt64)
		case userpost.FieldPostText:
			values[i] = new(sql.NullString)
		case userpost.FieldCreateTime:
			values[i] = new(sql.NullTime)
		case userpost.ForeignKeys[0]: // user_user_posts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPost fields.
func (up *UserPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = int(value.Int64)
		case userpost.FieldPostText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_text", values[i])
			} else if value.Valid {
				up.PostText = value.String
			}
		case userpost.FieldPostImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field post_images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.PostImages); err != nil {
					return fmt.Errorf("unmarshal field post_images: %w", err)
				}
			}
		case userpost.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				up.CreateTime = value.Time
			}
		case userpost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_posts", value)
			} else if value.Valid {
				up.user_user_posts = new(int)
				*up.user_user_posts = int(value.Int64)
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPost.
// This includes values selected through modifiers, order, etc.
func (up *UserPost) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryUserID queries the "user_id" edge of the UserPost entity.
func (up *UserPost) QueryUserID() *UserQuery {
	return NewUserPostClient(up.config).QueryUserID(up)
}

// Update returns a builder for updating this UserPost.
// Note that you need to call UserPost.Unwrap() before calling this method if this UserPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPost) Update() *UserPostUpdateOne {
	return NewUserPostClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPost) Unwrap() *UserPost {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPost is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPost) String() string {
	var builder strings.Builder
	builder.WriteString("UserPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("post_text=")
	builder.WriteString(up.PostText)
	builder.WriteString(", ")
	builder.WriteString("post_images=")
	builder.WriteString(fmt.Sprintf("%v", up.PostImages))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(up.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserPosts is a parsable slice of UserPost.
type UserPosts []*UserPost
