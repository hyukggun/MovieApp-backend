// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"movie-app/ent/predicate"
	"movie-app/ent/user"
	"movie-app/ent/userpost"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPostUpdate is the builder for updating UserPost entities.
type UserPostUpdate struct {
	config
	hooks    []Hook
	mutation *UserPostMutation
}

// Where appends a list predicates to the UserPostUpdate builder.
func (upu *UserPostUpdate) Where(ps ...predicate.UserPost) *UserPostUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetPostText sets the "post_text" field.
func (upu *UserPostUpdate) SetPostText(s string) *UserPostUpdate {
	upu.mutation.SetPostText(s)
	return upu
}

// SetPostImages sets the "post_images" field.
func (upu *UserPostUpdate) SetPostImages(m map[string]string) *UserPostUpdate {
	upu.mutation.SetPostImages(m)
	return upu
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (upu *UserPostUpdate) SetUserIDID(id int) *UserPostUpdate {
	upu.mutation.SetUserIDID(id)
	return upu
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (upu *UserPostUpdate) SetNillableUserIDID(id *int) *UserPostUpdate {
	if id != nil {
		upu = upu.SetUserIDID(*id)
	}
	return upu
}

// SetUserID sets the "user_id" edge to the User entity.
func (upu *UserPostUpdate) SetUserID(u *User) *UserPostUpdate {
	return upu.SetUserIDID(u.ID)
}

// Mutation returns the UserPostMutation object of the builder.
func (upu *UserPostUpdate) Mutation() *UserPostMutation {
	return upu.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (upu *UserPostUpdate) ClearUserID() *UserPostUpdate {
	upu.mutation.ClearUserID()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPostUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPostUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPostUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upu *UserPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userpost.Table, userpost.Columns, sqlgraph.NewFieldSpec(userpost.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.PostText(); ok {
		_spec.SetField(userpost.FieldPostText, field.TypeString, value)
	}
	if value, ok := upu.mutation.PostImages(); ok {
		_spec.SetField(userpost.FieldPostImages, field.TypeJSON, value)
	}
	if upu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpost.UserIDTable,
			Columns: []string{userpost.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpost.UserIDTable,
			Columns: []string{userpost.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPostUpdateOne is the builder for updating a single UserPost entity.
type UserPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPostMutation
}

// SetPostText sets the "post_text" field.
func (upuo *UserPostUpdateOne) SetPostText(s string) *UserPostUpdateOne {
	upuo.mutation.SetPostText(s)
	return upuo
}

// SetPostImages sets the "post_images" field.
func (upuo *UserPostUpdateOne) SetPostImages(m map[string]string) *UserPostUpdateOne {
	upuo.mutation.SetPostImages(m)
	return upuo
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (upuo *UserPostUpdateOne) SetUserIDID(id int) *UserPostUpdateOne {
	upuo.mutation.SetUserIDID(id)
	return upuo
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (upuo *UserPostUpdateOne) SetNillableUserIDID(id *int) *UserPostUpdateOne {
	if id != nil {
		upuo = upuo.SetUserIDID(*id)
	}
	return upuo
}

// SetUserID sets the "user_id" edge to the User entity.
func (upuo *UserPostUpdateOne) SetUserID(u *User) *UserPostUpdateOne {
	return upuo.SetUserIDID(u.ID)
}

// Mutation returns the UserPostMutation object of the builder.
func (upuo *UserPostUpdateOne) Mutation() *UserPostMutation {
	return upuo.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (upuo *UserPostUpdateOne) ClearUserID() *UserPostUpdateOne {
	upuo.mutation.ClearUserID()
	return upuo
}

// Where appends a list predicates to the UserPostUpdate builder.
func (upuo *UserPostUpdateOne) Where(ps ...predicate.UserPost) *UserPostUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPostUpdateOne) Select(field string, fields ...string) *UserPostUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPost entity.
func (upuo *UserPostUpdateOne) Save(ctx context.Context) (*UserPost, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPostUpdateOne) SaveX(ctx context.Context) *UserPost {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPostUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPostUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upuo *UserPostUpdateOne) sqlSave(ctx context.Context) (_node *UserPost, err error) {
	_spec := sqlgraph.NewUpdateSpec(userpost.Table, userpost.Columns, sqlgraph.NewFieldSpec(userpost.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpost.FieldID)
		for _, f := range fields {
			if !userpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.PostText(); ok {
		_spec.SetField(userpost.FieldPostText, field.TypeString, value)
	}
	if value, ok := upuo.mutation.PostImages(); ok {
		_spec.SetField(userpost.FieldPostImages, field.TypeJSON, value)
	}
	if upuo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpost.UserIDTable,
			Columns: []string{userpost.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpost.UserIDTable,
			Columns: []string{userpost.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPost{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
